import com.sample.*;

//rule "Payment cannot be of 0.0 value" 
//
//	when 
//		Pay: Payment_In(value == 0.0) 
//		Inc: Income(incomeList.size() > 0)
//	then 
//		System.out.println("The last element of the list is  " + Inc.getIncomeList().get(Inc.getIncomeList().size()-1).getValue() + " Payment cannot be of 0.0 value");
//		Inc.getIncomeList().remove(Inc.getIncomeList().size()-1);
//		System.out.println("The last element of the list is " + Inc.getIncomeList().get(Inc.getIncomeList().size()-1).getValue());
//
//end 

//1
rule "Adding a new Expense if the balance is positive"

    when
    	BO: Balance(currentBalance > 0 )  
    	Pay: Payment_Out(BO.currentBalance >= Pay.value)
    	Exp :Expense(expensesList.size() >0)   
    then	    
    	Exp.getExpensesList().add(Pay);
		System.out.println("You've just added a new Expense with the value: " + Pay.getValue());
end

//2
rule "Incomes cannot be negative" 

	when 
		Pay: Payment_In(value <0 ) 
		Inc: Income(incomeList.size() >= 0)
	then 
	//	System.out.println("You cannot insert into this list a negative number !! : " + Inc.getIncomeList().get(Inc.getIncomeList().size()-1).getValue());
		Inc.getIncomeList().remove(Inc.getIncomeList().size()-1);
	//	System.out.println("The lastest valid Income was : " + Inc.getIncomeList().get(Inc.getIncomeList().size()-1).getValue());

end 

//3
rule "Add a new payment if the payment is positive"

	when
		Pay: Payment_In(value > 0.0)
		Inc: Income(incomeList.size() >=0)	
	then
	//	System.out.println("Valid Income! Adding it to the incomeList : "  + Pay.getValue() + " Add a new payment if the payment is positive");
		Inc.getIncomeList().add(Pay);
	//	System.out.println("The lastest valid Income was : " + Inc.getIncomeList().get(Inc.getIncomeList().size()-1).getValue());
end

//4
rule "Expenses cannot be 0" 

	when 
		Pay: Payment_Out(value == 0.0 ) 
		Exp: Expense(expensesList.size() >= 0)  
	then 
		System.out.println("You cannot insert into this list a negative number !! : " + Exp.getExpensesList().get(Exp.getExpensesList().size()-1).getValue());
		Exp.getExpensesList().remove(Exp.getExpensesList().size()-1);
		System.out.println("The lastest valid Expense was : " + Exp.getExpensesList().get(Exp.getExpensesList().size()-1).getValue());	
end 

//5
rule "If the expense_payment value is lower than 450, the payment Type is Order"

	when
		PayOut: Payment_Out(value > 75 && value < 450)
	then 
		System.out.println("1Paymen_out type at start is: " + PayOut.getPaymentType());
		PayOut.setPaymentType(PaymentType.MONTHLY);
		System.out.println("1Paymen_out type at end is: " + PayOut.getPaymentType());
end

//6
rule "If the expense_payment value is greater or equal to 450, the payment Type is SPECIALEVENTS"

	when
		PayOut: Payment_Out(value >= 450)
	then 
		System.out.println("2Payment_out type at start is: " + PayOut.getPaymentType());
		PayOut.setPaymentType(PaymentType.SPECIALEVENTS);
		System.out.println("2Payment_out type at end is: " + PayOut.getPaymentType());
end

//7
rule "If the expense_payment value is lower or equal to 75, the payment Type is Monthly" 

	when 
		PayOut: Payment_Out(value <= 75) 
		
	then 
		System.out.println("3Paymen_out type at start is: " + PayOut.getPaymentType());
		PayOut.setPaymentType(PaymentType.MONTHLY);
		System.out.println("3Payment_out type at end is: " + PayOut.getPaymentType());
end

//8
rule "If the income_payment value is lower or equal to 75, the income_payment Type is Monthly" 

	when 
		PayIn: Payment_In(value <= 75) 
		
	then 
		System.out.println("4Payment_in type at start is: " + PayIn.getPaymentType());
		PayIn.setPaymentType(PaymentType.MONTHLY);
		System.out.println("4Payment_in type at end is: " + PayIn.getPaymentType());	
end

//9
rule "If the income_payment value is greater than 75, the income_payment Type is Order"

	when
		PayIn: Payment_Out(value > 75)
	then 
		System.out.println("5Payment_in type at start is: " + PayIn.getPaymentType());
		PayIn.setPaymentType(PaymentType.MONTHLY);
		System.out.println("5Payment_in type at end is: " + PayIn.getPaymentType());	
end

//10
rule "You can only  add an expense if it's value is lower than the totalIncome"

	when
		Inc: Income(totalIncome > 0)
		PayOut: Payment_Out(PayOut.value < Inc.totalIncome)
		Exp:Expense() 
	then
		Exp.getExpensesList().add(PayOut);
		System.out.println("You have added a new expense with the value: " + PayOut.getValue());
end

//11
rule "Add a new expense if the expense is positive" 

	when 
		PayOut: Payment_Out( value >0 ) 
		Exp: Expense(expensesList.size() >= 0)
	then 
		Exp.getExpensesList().add(PayOut);
		System.out.println("You have added a new Expense : " + PayOut.getValue());
end 

//12
rule "If the firm current balance is lower than 0, the bank is going bankrupt"

	when 
		FIRM: Firm( balance.getCurrentBalance() < 0 )
	then
		System.out.println("Old firm status was : " + FIRM.getBankruptcyStatus());
		FIRM.setBankruptcyStatus(BankruptcyStatus.GOING_BANKRUPT);
		System.out.println("You have set a new firm status: " + FIRM.getBankruptcyStatus());
end

//13
rule "If the firm current balance is lower than 15000 and higher than 0, the firm is not doing well"

	when 
		FIRM: Firm( balance.getCurrentBalance() > 0 && balance.getCurrentBalance() < 15000)
	then
		System.out.println("Old firm status was : " + FIRM.getBankruptcyStatus());
		FIRM.setBankruptcyStatus(BankruptcyStatus.NOT_DOING_WELL);
		System.out.println("You have set a new firm status: " + FIRM.getBankruptcyStatus());
end

//14 
rule "If the firm current balance is and higher than 15000, the firm is doing good"

	when 
		FIRM: Firm(balance.getCurrentBalance() > 15000)
	then
		System.out.println("Old firm status was : " + FIRM.getBankruptcyStatus());
		FIRM.setBankruptcyStatus(BankruptcyStatus.IS_DOING_GOOD);
		System.out.println("You have set a new firm status: " + FIRM.getBankruptcyStatus());
end

//15 
rule "You cannot have bigger Payment_In than 50000"
	
	when 
		Pay: Payment_In(value > 50000)
		Inc: Income()
	then
	System.out.println("You cannot add a bigger income in than 50000 !");
		double payment1 = Pay.getValue()/2 ;
		double payment2 = Pay.getValue() - payment1;
		Payment_In payment34 = new Payment_In(payment1);	
		Payment_In payment35 = new Payment_In(payment2);
		Inc.getIncomeList().add(payment34);
		Inc.getIncomeList().add(payment35);	
		System.out.println("We have split the value in two " + payment1 + " and " + payment2);
end

//16 
rule "You cannot have bigger Payment_Out than 30000"
	
	when 
		Pay: Payment_Out(value > 30000)
		Exp: Expense()
	then
	System.out.println("You cannot add a bigger expense  than 30000 !");
		double payment1 = Pay.getValue()/2 ;
		double payment2 = Pay.getValue() - payment1;
		Payment_Out payment36 = new Payment_Out(payment1);	
		Payment_Out payment37 = new Payment_Out(payment2);
		Exp.getExpensesList().add(payment36);
		Exp.getExpensesList().add(payment37);	
		System.out.println("We have split the value in two");
end







